[init]
  defaultBranch = main
  templatedir = ~/.git/templates
[user]
	name = @mysubsnewslivecom
	email = my.subs.news@live.com
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk
  # Shows list of contributors of a repository.
  contributors = shortlog --summary --numbered --email

  # via http://philjackson.github.io/2013/04/07/handy-git-tips-to-stop-you-getting-fired.html
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)
  brc = rev-parse --abbrev-ref HEAD

  # commit
  cm = commit -m                    # commit with message
  cam = commit -am                  # commit all with message
  c = commit                        # commit
  amend = commit --amend            # amend your last commit

  # checkout
  co = checkout                     # checkout
  cob = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")
  com = checkout main

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  l = log --graph --date=short
  l1 = log --oneline --decorate
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # merge
  m = merge
  mm = merge main
  mo = merge orgin main

  # pull
  pl = pull --rebase                         # pull

  # push
  ps = push                         # push
  psub = push --set-upstream origin !$(git brc)

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  st = stash                        # stash changes
  stl = stash list                   # list stashes
  sta = stash apply                  # apply stash (restore changes)
  std = stash drop                   # drop stashes (destory changes)
  stp = stash pop
  sts = stash save snapshot: $(date)
  stsnp = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  stsnpl = stash list --grep snapshot

  # status
  s = status                        # status
  sb = status -s -b

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
[advice]
  statusHints = false
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
[core]
	hooksPath = ~/.git/templates/hooks
  autocrlf = false
  editor = vim
	excludesfile = ~/.yadr/git/gitignore
[commit]
	template = ~/.git/templates/commit/commit-message
[color]
	ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[include]
  path = .gitconfig.user
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[status]
    short = true
